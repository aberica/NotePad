[문제 설명]

한 페이지에 N 개의 단어들이 있는 단어사전이 있다.

단어는 길이 10 이하의 영어 소문자로 구성된 문자열이다.

단어들은 사전순으로 정렬 되어 있다.

 

만약 단어가 10개 존재하고 N 이 3 이라면 첫번째 페이지에는 사전순으로 1번째 ~ 3번째인 단어들이 존재하고, 두번째 페이지에는 4번째 ~ 6번째인 단어들, 마지막 페이지인 4번째 페이지에는 사전순으로 10번째인 단어 1개만이 존재한다.

 

단어들은 새로 추가되기도 하고, 사전에 존재하는 단어들이 없어지기도 한다.

이런 경우에도 단어들은 사전순으로 관리되어야 한다.

 

또한 특정 페이지의 첫 번째에 존재하는 단어를 찾아야 한다.

만약 위의 경우 두 번째 페이지에 존재하는 단어를 찾아야 한다면, 사전순으로 4번째에 해당하는 단어를 반환하면 된다.

 

마지막으로 특정 단어가 주어졌을 때, 그 단어가 존재하는 페이지 번호를 반환해야 한다.

 

아래 API 설명을 참조하여 각 함수를 구현하라.

아래는 User Code 부분에 작성해야 하는 API 의 설명이다.

void init(int N, string mWordList[], int mWordSize)

테스트 케이스에 대한 초기화 함수.

각 테스트 케이스의 맨 처음 1회 호출된다.

 

N 은 한 페이지에 존재하는 단어의 갯수를 의미한다.

mWordList 는 초기에 존재하는 단어들이다.

단어들은 중복 없이 주어진다.

주어지는 단어들은 사전순으로 정렬되어 있지 않음에 유의하라.

 

mWordSize 는 초기에 존재하는 단어의 갯수이다.

 

string type 은 각 언어별로 다르게 주어지므로, 주어진 템플릿 코드를 기준으로 작성하라.

 

Parameters

N : 한 페이지에 존재하는 단어의 수 (1 ≤ N ≤ 10,000)

  mWordList : 초기에 존재하는 단어들 (1 ≤ 각 단어의 길이 ≤ 10)

  mWordSize : 초기에 존재하는 단어의 갯수 (5 ≤ mWordSize ≤ 10,000)

void addWord(string mWordList[], int mWordSize)

새로운 단어들이 추가 된다.

mWordSize는 추가할 단어의 갯수이다.

 

이 단어들은 사전에 존재하지 않는 것들이고, 중복되지 않게 주어진다.

 

주어지는 단어들은 사전순으로 정렬되어 있지 않음에 유의하라.

 

Parameters

  mWordList : 추가할 단어들 (1 ≤ 각 단어의 길이 ≤ 10)

  mWordSize : 추가할 단어의 갯수 (1 ≤ mWordSize ≤ 100)

void removeWord(string mWordList[], int mWordSize)

단어들이 사전에서 삭제 된다.

mWordSize는 삭제할 단어의 갯수이다.

 

삭제할 단어들은 사전에 존재하는 것들이고, 중복되지 않게 주어진다.

 

Parameters

  mWordList : 삭제할 단어들 (1 ≤ 각 단어의 길이 ≤ 10)

  mWordSize : 삭제할 단어의 갯수 (1 ≤ mWordSize ≤ 100)

string findWord(int mPageNum)

사전에서 mPageNum 페이지의 첫번째 단어를 찾아 반환한다.

mPageNum은 현재 존재하는 페이지 번호임이 보장된다.

 

Parameters

  mPageNum : 단어를 찾을 페이지

 

Return

  해당 페이지의 첫번째 단어

int findPage(string mWord)

사전에서 mWord 가 존재하는 페이지 번호를 반환한다.

단어는 현재 사전에 존재하는 것만 주어진다.

 

Parameters

  mWord : 페이지를 찾을 단어 (1 ≤ 단어의 길이 ≤ 10)

 

Return

  해당 단어가 존재하는 페이지 번호

 

[예제]

[Table 1] 은 첫번째 테스트케이스에서 호출되는 함수를 순서대로 적은 표이다.

Order

API

반환 값

Table

1

init(N=3, ...)

 

[Table 1]

2

findWord(1)

b

 

3

findWord(2)

bbbb

 

4

findWord(3)

bbbbbbb

 

5

findWord(4)

bbbbbbbbbb

 

6

findPage(“bbb”)

1

 

7

findPage(“bbbbbb”)

2

 

8

addWord([“bbbbbba”, ”bbbaa”], 2)

 

[Table 2]

9

findWord(2)

bbbaa

 

10

removeWord([“bbbbb”, “bb”, “bbbbbb”], 3)

 

[Table 3]

11

findWord(2)

bbbb

 

12

findWord(3)

bbbbbbbb

 

13

findPage(“bbbbbba”)

2

 

 

이 테스트케이스에서 N 은 3 이다.

한 페이지에 단어가 3개씩 존재한다.

Order 1의 init() 함수가 호출된 이후의 상태는 [Table 1] 과 같다.

 

Page

단어

1

b

bb

bbb

2

bbbb

bbbbb

bbbbbb

3

bbbbbbb

bbbbbbbb

bbbbbbbbb

4

bbbbbbbbbb

[Table 1]

 

Order 8 의 addWord([“bbbbbba”, ”bbbaa”], 2) 가 호출된 이후의 상태는 [Table 2] 와 같다.

Page

단어

1

b

bb

bbb

2

bbbaa

bbbb

bbbbb

3

bbbbbb

bbbbbba

bbbbbbb

4

bbbbbbbb

bbbbbbbbb

bbbbbbbbbb

[Table 2]

 

Order 10 의 removeWord([“bbbbb”, “bb”, “bbbbbb”], 3) 가 호출된 이후의 상태는 [Table 3] 와 같다.

 

Page

단어

1

b

bbb

bbbaa

2

bbbb

bbbbbba

bbbbbbb

3

bbbbbbbb

bbbbbbbbb

bbbbbbbbbb

[Table 3]

 

[제약사항]

1. 각 테스트 케이스 시작 시 init() 함수가 한 번 호출된다.

2. 각 테스트케이스별로 addword() 의 호출횟수는 최대 5,000 회이다.

3. 각 테스트케이스별로 removeWord() 의 호출횟수는 최대 100 회이다.

4. 각 테스트케이스별로 findWord() 의 호출횟수는 최대 100,000 회이다.

5. 각 테스트케이스별로 findPage() 의 호출횟수는 최대 100,000 회이다.

 

[입출력]

입출력은 제공되는 Main 부분의 코드에서 처리하므로 User Code 부분의 코드에서는 별도로 입출력을 처리하지 않는다.

Sample input에 대한 정답 출력 결과는 "#TC번호 결과"의 형태로 출력되며, 결과가 100일 경우 Pass, 0일 경우 Fail을 의미한다.
